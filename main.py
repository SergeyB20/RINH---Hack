from aiogram import types, executor, Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup
from datetime import datetime
import time, random, os, docx, textract, PyPDF2
from forms import Form 
import openai, fitz
import networkx as nx
import matplotlib.pyplot as plt



TOKEN = '6096486458:AAGMUDsTrCCb9bV3kks2qJRfq1od9vbNFG4' #BOTFATHER –¢–û–ö–ï–ù
openai.api_key = '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' #OPENAI –¢–û–ö–ï–ù
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())



@dp.message_handler(commands=['start'])
async def get_text_messages(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –ø—Ä–∏—à–ª–∏ –¥–æ–∫—É–º–µ–Ω—Çüòä', reply_markup=keyboard)
    await Form.start.set()


# –û–ë–†–ê–ë–û–¢–ö–ê –ò –£–°–¢–ê–ù–û–í–ö–ê –ü–û–õ–£–ß–ï–ù–ù–û–ì–û –î–û–ö–£–ú–ï–ù–¢–ê
@dp.message_handler(content_types=types.ContentType.DOCUMENT, state= Form.start)
async def adc_function(message: types.Message, state: FSMContext):

    document = message.document
    user_id = str(message.from_user.id)
    file_name = os.path.join("", document.file_name)
    file = document.file_name.split('.')[-1]
    await bot.download_file_by_id(document.file_id, f'{user_id}.{file}')
    msg = await message.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç ‚ò∫Ô∏è")


    try:
    # –†–ê–ó–ë–ò–¢–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê –ü–û –†–ê–°–®–ò–†–ï–ù–ò–Æ

        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ docx/doc
        if (file == 'doc') or (file == 'docx'):
            doc = docx.Document(f'{user_id}.{file}')
            text = '\n'.join([para.text for para in doc.paragraphs])

        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ txt
        if file == 'txt':
            with open(f'{user_id}.txt', encoding='utf-8') as f:
                text = f.read()


        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pdf
        if file == 'pdf':
            with fitz.open(f'{user_id}.pdf') as pdf_file:
                    for page in pdf_file:
                        text = str(page.get_text())


        #–û–ë–†–ê–©–ï–ù–ò–ï –ö CHAT-GPT. –û–ì–õ–ê–í–õ–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û–î–¢–ï–ú
        response = openai.Completion.create(
                model="text-davinci-003",
                prompt=f"–û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é/–∏–¥–µ—é —Ç–µ–∫—Å—Ç–∞ –≤ –¥–≤—É—Ö-—Ç—Ä–µ—Ö —Å–ª–æ–≤–∞—Ö. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, —Ä–∞–∑–±–∏—Ç—å –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –Ω–∞ –ø–æ–¥—Ç–µ–º—ã –∏–ª–∏ –∑–∞–¥–∞—á–∏ –∏ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n–ü—Ä–∏–º–µ—Ä:\n–ù–∞–∑–≤–∞–Ω–∏–µ/–∫–æ–Ω—Ü–µ–ø—Ü–∏—è —Ç–µ–∫—Å—Ç–∞\n 1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π –∏–¥–µ–∏: –ø–æ–¥–ø—É–Ω–∫—Ç, –ø–æ–¥–ø—É–Ω–∫—Ç, –ø–æ–¥–ø—É–Ω–∫—Ç\n2. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π –∏–¥–µ–∏: –ø–æ–¥–ø—É–Ω–∫—Ç, –ø–æ–¥–ø—É–Ω–∫—Ç, –ø–æ–¥–ø—É–Ω–∫—Ç\n\n –ò —Ç–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç\n\n—Ç–µ–∫—Å—Ç:{text}",
                temperature=0.5,
                max_tokens=1000,
                top_p=1.0,
                frequency_penalty=0.5, 
                presence_penalty=0.0,
                    )
        

        #–ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ù–¢–ï–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ô –ö–ê–†–¢–´
        try:
            #–°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–ê –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ò–ù–¢–ï–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ô –ö–ê–†–¢–´
            with open('graf.txt', 'w', encoding='utf-8') as document:
                document.write(response['choices'][0]['text'])
            with open(f'{user_id}.py', 'w', encoding='utf-8') as pw:
                    with open('graf.txt', 'r', encoding='utf-8') as gr:
                        graf_text = gr.read().split('\n')
                    pw.write(f"import os\nos.system('pip install matplotlib')\nos.system('pip install networkx')\nimport networkx as nx\nimport matplotlib.pyplot as plt\nG = nx.Graph()\nresult = {graf_text}\nheading = result[0].split(':')[-1]\nG.add_node(heading)\ndel result[0]\nfor x in result:\n  head = x.split(':')[0]\n  G.add_node(head)\n  G.add_edge(head, heading)\n  edges = x.split(':')[-1].split(',')\n  for i in edges:\n      G.add_node(i)\n      G.add_edge(i, head)\npos = nx.spring_layout(G, seed=42)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–∑–ª–æ–≤ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏\nnx.draw(G, pos, with_labels=True)  # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É–∑–ª–æ–≤\nplt.show()")

            #–°–û–ó–î–ê–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ù–¢–ï–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ô –ö–ê–†–¢–´
            G = nx.Graph()
            result = str(response['choices'][0]['text']).split('\n')
            heading = result[0].split(':')[-1]
            G.add_node(heading)
            del result[0]
            for x in result:
                head = x.split(':')[0]
                G.add_node(head)
                G.add_edge(head, heading)
                edges = x.split(':')[-1].split(',')
                for i in edges:
                    G.add_node(i)
                    G.add_edge(i, head)

            pos = nx.spring_layout(G, seed=42)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–∑–ª–æ–≤ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            nx.draw(G, pos, with_labels=True)  # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É–∑–ª–æ–≤
            plt.savefig(f'{user_id}.png')
            plt.close()

            photo = open(f"{user_id}.png", 'rb')
            response = response['choices'][0]['text']
            await msg.delete()

            with open(f'{user_id}.py', 'rb') as info_doc:
                f = info_doc.read()
            await bot.send_document(message.chat.id, f, caption='‚¨ÜÔ∏è–í—ã—à–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –ø–æ—Ç–µ—Ä—å\n\n‚úÖ–í—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –≤ —É–¥–æ–±–Ω–æ–π –≤–∞–º —Å—Ä–µ–¥–µ')

            await bot.send_photo(message.chat.id, photo=photo, caption=f'‚ùóÔ∏èüó∫Ô∏è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞‚ùóÔ∏è\n{response}')

        except:
            result = str(response['choices'][0]['text'])
            await msg.delete()
            await bot.send_message(message.chat.id, f'–ù–µ—É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É, –Ω–æ —è —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ø—É–Ω–∫—Ç—ã –∏ –ø–æ–¥–ø—É–Ω–∫—Ç—ã!\n\n{result}')

        #–£–î–ê–õ–ï–ù–ò–ï –§–ê–ô–õ–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø, –î–õ–Ø –ö–û–ù–¢–†–û–õ–Ø –ü–ê–ú–Ø–¢–ò
        os.remove(f'{user_id}.{file}')
        os.remove(f'{user_id}.png')
        os.remove(f'{user_id}.py')
        os.remove('graf.txt')



    #–°–û–û–ë–©–ï–ù–ò–ï –û–ë –û–®–ò–ë–ö–ï
    except:
        await msg.delete()
        await bot.send_message(message.chat.id, '–û–ô —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ!')
    

    await Form.start.set()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)